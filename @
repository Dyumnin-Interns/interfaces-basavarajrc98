import cocotb
from cocotb.triggers import Timer,RisingEdge, NextTimeStep
from cocotb_bus.driver import BusDriver

@cocotb.test()
async def dut_test(dut):
	a = (0, 0, 1, 1)	
	b = (0, 1, 0, 1)	
	y = (0, 1, 1, 1)
	dut.RST_N.value = 1
	await Timer(1, 'ns')
	dut.RST_N.value = 0
	await Timer(1, 'ns')
	await RisingEdge(dut.CLK)
	dut.RST_N.value = 1

	
	for i in range(4):
		dut.a.valu
    assert 0, "Test not Implemented"

class InputDriver(BusDriver):
	_signals = ['rdy', 'en', 'data']

	def __init__(self,dut,name,clk):
		BusDriver.__init__(self,dut,name,clk)
		self.bus.en.value = 0
		self.clk = clk

	async_def _driver_send(self, value, sync=True):
		if self.bus.rdy.value != 1:
			await RisingEdge(self.bus.rdy)
		self.bus.en.value = 1
		self.bus.data.value = value
		await ReadOnly()
		await RisingEdge(self.clk)
		self.bus.en = 0
		await NextTimeStep()

class OutputDriver(Busdriver):
	_signals = ['rdy', 'en', 'data']

	def __init__(self,dut,name,clk,sb_callback):
		BusDriver.__init__(self,dut,name,clk)
		self.bus.en.value = 0
		self.clk = clk
		self.callback = sb_callback

	async_def _driver_send(self, value, sync=True):
		if self.bus.rdy.value != 1:
			await RisingEdge(self.bus.rdy)
		self.bus.en = 1
		#self.bus.data = value
		await ReadOnly()
		self.callback(self.bus.data.value)
		await RisingEdge(self.clk)
		self.bus.en = 0
		await NextTimeStep()
